/****************************************************
 * Class:  ArrayListTester
 *
 * DO NOT EDIT THIS FILE
 *************************************************/

#pragma once

#include "Tester.h"

#include <iostream>
#include <sstream>
#include <string>
#include <exception>
using namespace std;


/****************************************************
 * ArrayListTester
 * ---------------
 *
 * Command                Tests...
 *
 * new                    the default constructor
 * new n                  the constructor with an argument n
 * delete                 the destructor
 *
 * empty b                empty() == b
 * size n                 size() == n
 * at i n                 at( i ) == n
 * at-exception i         at( i ) throws an exception
 * print                  print the elements in order separated by dashes
 *
 * insert i n             insert( i, n) succeeds
 * insert-exception i n   insert( i, n ) throws an exception
 * erase i                erase( n ) succeeds
 * erase-exception i      erase( n ) throws an exception
 ****************************************************/
template<class ArrayClass>
class ArrayListTester: public Tester<ArrayClass> {
public:
    ArrayListTester(): Tester<ArrayClass>() {
        this->calls = {
            { "new", [this](const string &params){this->newobj(params);}},
            { "empty", [this](const string &params){this->empty(params);}},
            { "size", [this](const string &params){this->size(params);}},
            { "maxsize", [this](const string &params){this->maxsize(params);}},
            { "at", [this](const string &params){this->at(params);}},
            { "at-exception", [this](const string &params){this->at_exception(params);}},
            { "print", [this](const string &params){this->print(params);}},
            { "insert", [this](const string &params){this->insert(params);}},
            { "insert-exception", [this](const string &params){this->insert_exception(params);}},
            { "erase", [this](const string &params){this->erase(params);}},
            { "erase-exception", [this](const string &params){this->erase_exception(params);}},
         };
    }

    void newobj(const string &params) {
        istringstream sin (params);
        int n;
        sin >> n;
        if (n == 0)
            this->object = new ArrayClass();
        else
            this->object = new ArrayClass( n );
        cout << "Okay";
    }

    void empty(const string &params) {
        istringstream sin (params);
        bool expected_Boolean;
        sin >> expected_Boolean;

        bool actual_Boolean = this->object->empty();

        if ( actual_Boolean == expected_Boolean ) {
            cout << "Okay";
        } else {
            cout << "Failure in empty(): expecting the value '" << expected_Boolean << "' but got '" << actual_Boolean << "'";
        }
    }

    void size(const string &params) {
        istringstream sin (params);
        int expected_size;
        sin >> expected_size;

        int actual_size = this->object->size();

        if ( actual_size == expected_size ) {
            cout << "Okay";
        } else {
            cout << "Failure in size(): expecting the value '" << expected_size << "' but got '" << actual_size << "'";
        }
    }

    void maxsize(const string &params) {
        istringstream sin (params);
        int expected_size;
        sin >> expected_size;

        int actual_size = this->object->max_size();

        if ( actual_size == expected_size ) {
            cout << "Okay";
        } else {
            cout << "Failure in max_size(): expecting the value '" << expected_size << "' but got '" << actual_size << "'";
        }
    }

    void at(const string &params) {
        istringstream sin (params);
        int i;
        sin >> i;

        int expected_get;
        sin >> expected_get;

        int actual_get = this->object->at( i );

        if ( actual_get == expected_get ) {
            cout << "Okay";
        } else {
            cout << "Failure in get(" << i << "): expecting the value '" << expected_get << "' but got '" << actual_get << "'";
        }
    }

    void at_exception(const string &params) {
        istringstream sin (params);
        int i;
        sin >> i;

        try {
            this->object->at( i );
            cout << "Failure: expecting an exception in at(" << i << ") but it wasn't raised";
        } catch (const std::out_of_range& e ) {
            cout << "Okay: " << e.what();
        } catch (...) {
            cout << "Failure: an unexpected exception";
        }
    }

    void print(const string &params) {
        UNUSED(params);
        this->object->print();
    }

    void insert(const string &params) {
        istringstream sin (params);
        int i, n;
        sin >> i >> n;

        this->object->insert( i, n );
        cout << "Okay";
    }

    void insert_exception(const string &params) {
        istringstream sin (params);
        int i, n;
        sin >> i >> n;

        try {
            this->object->insert( i, n );
            cout << "Failure: expecting an exception in insert(" << i << ", " << n << ") but it wasn't raised";
        } catch (const std::overflow_error& e ) {
            cout << "Okay: "<< e.what() ;
        } catch (const std::out_of_range& e ) {
            cout << "Okay: " << e.what();
        } catch (...) {
            cout << "Failure: an unexpected exception";
        }
    }

    void erase(const string &params) {
        istringstream sin (params);
        int i;
        sin >> i;

        try {
            this->object->erase( i );
            cout << "Okay";
        } catch (const std::out_of_range& e ) {
            cout << "Failure in erase(" << i << "): " << e.what();
        }
    }

    void erase_exception(const string &params) {
        istringstream sin (params);
        int i;
        sin >> i;

        try {
            this->object->erase( i );
            cout << "Failure in erase(" << i << "): expecting an exception but it wasn't raised";
        } catch (const std::out_of_range& e ) {
            cout << "Okay: " << e.what();
        }
    }
};
